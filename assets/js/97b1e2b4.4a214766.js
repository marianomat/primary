"use strict";(self.webpackChunkprimary_docs=self.webpackChunkprimary_docs||[]).push([[265],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>m});var o=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,o,r=function(e,a){if(null==e)return{};var n,o,r={},t=Object.keys(e);for(o=0;o<t.length;o++)n=t[o],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(o=0;o<t.length;o++)n=t[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var a=o.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},u=function(e){var a=c(e.components);return o.createElement(s.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},p=o.forwardRef((function(e,a){var n=e.components,r=e.mdxType,t=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,v=p["".concat(s,".").concat(m)]||p[m]||d[m]||t;return n?o.createElement(v,l(l({ref:a},u),{},{components:n})):o.createElement(v,l({ref:a},u))}));function m(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var t=n.length,l=new Array(t);l[0]=p;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<t;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3530:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>i,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const t={sidebar_position:2},l="Problemas de Programacion I/O",i={unversionedId:"problemas-programacion",id:"problemas-programacion",title:"Problemas de Programacion I/O",description:"Problema",source:"@site/docs/problemas-programacion.md",sourceDirName:".",slug:"/problemas-programacion",permalink:"/primary/docs/problemas-programacion",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/problemas-programacion.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introducci\xf3n",permalink:"/primary/docs/intro"},next:{title:"SQL",permalink:"/primary/docs/SQL"}},s={},c=[{value:"Problema",id:"problema",level:2},{value:"Soluci\xf3n",id:"soluci\xf3n",level:2},{value:"Variables",id:"variables",level:3},{value:"Extracci\xf3n de listas en archivos",id:"extracci\xf3n-de-listas-en-archivos",level:3},{value:"Tama\xf1o total e indices",id:"tama\xf1o-total-e-indices",level:3},{value:"Algoritmo",id:"algoritmo",level:3},{value:"Salida",id:"salida",level:3},{value:"Adicionales",id:"adicionales",level:3},{value:"Preguntas Extra",id:"preguntas-extra",level:2},{value:"1) \xbfQu\xe9 es y para qu\xe9 sirve una clase abstracta? \xbfQu\xe9 es herencia m\xfaltiple?",id:"1-qu\xe9-es-y-para-qu\xe9-sirve-una-clase-abstracta-qu\xe9-es-herencia-m\xfaltiple",level:3},{value:"2) \xbfQu\xe9 es, para qu\xe9 sirve y c\xf3mo se implementan los m\xe9todos privados y p\xfablicos de las clases en Python?",id:"2-qu\xe9-es-para-qu\xe9-sirve-y-c\xf3mo-se-implementan-los-m\xe9todos-privados-y-p\xfablicos-de-las-clases-en-python",level:3},{value:"3) \xbfCu\xe1l es la diferencia entre un tipo de dato list, set, tuple y dict? \xbfEn qu\xe9 caso utilizar\xeda cada una de ellas?",id:"3-cu\xe1l-es-la-diferencia-entre-un-tipo-de-dato-list-set-tuple-y-dict-en-qu\xe9-caso-utilizar\xeda-cada-una-de-ellas",level:3},{value:"4) \xbfQue es un decorator en Python? De un ejemplo de c\xf3mo utilizar\xeda uno?",id:"4-que-es-un-decorator-en-python-de-un-ejemplo-de-c\xf3mo-utilizar\xeda-uno",level:3}],u={toc:c};function d(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"problemas-de-programacion-io"},"Problemas de Programacion I/O"),(0,r.kt)("h2",{id:"problema"},"Problema"),(0,r.kt)("p",null,"Se debe implementar un c\xf3digo en Python que lea el contenido de varios archivos los\ncuales contienen la siguiente informaci\xf3n de entrada (son n archivos cuyo contenido\nson n\xfameros que vienen ordenados):\nArchivo 1: ","[1,3,5,7,9,....]"," Archivo 2: ","[2,4,6,8,...]"," Archivo 3: ","[0,10,20,30,...]","\nY genere un \xfanico archivo de salida que contenga una lista ordenada de los valores de\nentrada:\nEjemplo : Archivo resultado: ","[0,1,2,3,4,5,6,7,8,9,10\u2026]"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Aclaraciones:"),"\nTener en cuenta que pueden ser infinitamente grande y los valores de entrada como de\nsalida siempre est\xe1n ordenados"),(0,r.kt)("h2",{id:"soluci\xf3n"},"Soluci\xf3n"),(0,r.kt)("admonition",{title:"Acepta N archivos en la carpeta archivos",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"C\xf3digo: ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/marianomat/primary-exam"},"repositorio de github")),".")),(0,r.kt)("p",null,"La mayor complejidad la encontr\xe9 en el algoritmo para generar la lista final. Primero pens\xe9 en concatenar las listas y luego hacer un sort, pero\nes muy ineficiente porque ser\xeda un O(n^n)."),(0,r.kt)("p",null,"Para que sea eficiente me ten\xeca que apalancar con la mayor ventaja que ten\xeca el ejercico que era que las listas ya est\xe0n ordenadas, por lo que el algoritmo\nno deber\xeca ser exponencial sino lineal, ya que con recorrer las listas una sola vez se deber\xeca llegar a la lista final."),(0,r.kt)("h3",{id:"variables"},"Variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"arr = []  # Lista que contiene las listas de los archivos\narr_last_index = []  # Lista que contiene el indice del ultimo numero colocado en el array_final\ntotal_length = 0  # Cantidad de loops que debe realizar el for, es la sumatoria de elementos de todas las listas\nfinal_list = []  # lista final que se retorna\n")),(0,r.kt)("h3",{id:"extracci\xf3n-de-listas-en-archivos"},"Extracci\xf3n de listas en archivos"),(0,r.kt)("p",null,"Tuve que googlear un poco para recordar las funciones.\nBusca todos los archivos que se encuentran en la carpeta archivos y agrega las listas a una lista que los contiene."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'# codigo fuente: https://stackoverflow.com/questions/18262293/how-to-open-every-file-in-a-folder\nfor filename in os.listdir("./archivos"):\n    with open(os.path.join("./archivos", filename), \'r\') as f:  # open in readonly mode\n        # codigo fuente: https://stackoverflow.com/questions/36209980/reading-a-list-stored-in-a-text-file\n        # documentacion ast,literal_eval https://docs.python.org/3/library/ast.html#ast.literal_eval\n        # Soluciona el problema de que tomaba la list como un String, ahora lo reconoce como list\n        arr.append((ast.literal_eval(f.read())))\nf.close()\n\n')),(0,r.kt)("h3",{id:"tama\xf1o-total-e-indices"},"Tama\xf1o total e indices"),(0,r.kt)("p",null,"Se guarda el total de elementos para luego recorrerlos en un for y tambi\xe9n se coloca el 0 en el array que contiene los \xedndices del \xfaltimo numero elegido\nseg\xfan la cantidad de listas."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Inicializamos los elementos en el indice 0\nfor i in range(len(arr)):\n    arr_last_index.append(0)\n    total_length += len(arr[i])\n\n")),(0,r.kt)("h3",{id:"algoritmo"},"Algoritmo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"for i in range(total_length - 1):\n    min_num_list = []\n    for j in range(len(arr)):\n        if len(arr[j]) != arr_last_index[j]:\n            min_num_list.append(arr[j][arr_last_index[j]])\n    min_num = min(min_num_list)\n    for j in range(len(arr)):\n        if len(arr[j]) > arr_last_index[j] and min_num == arr[j][arr_last_index[j]]:\n            if arr_last_index[j] < len(arr[j]): arr_last_index[j] += 1\n    final_list.append(min_num)\n\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Primero hay un for de K iteraciones, siendo K la suma de todos los elementos de las listas importadas, valor que contiene total_length."),(0,r.kt)("li",{parentName:"ol"},"Luego se compara el primer elemento de cada lista que no haya sido comparado antes."),(0,r.kt)("li",{parentName:"ol"},"Para saber si se compar\xf3 antes, se utiliza la lista arr_last_index, donde contiene en cada elemento el ultimo indice de cada lista utilizado.\nUso los indices para reconocer a que lista corresponde, ya que comparten el indice con la lista que tienee todas las listas arr."),(0,r.kt)("li",{parentName:"ol"},"Se agrega el numero de cada lista no comparado a min_num_list."),(0,r.kt)("li",{parentName:"ol"},"Luego con min() veo cual es el elemento menor y lo agrego a la lista final."),(0,r.kt)("li",{parentName:"ol"},"Actualizo cual fue el indice del numero al array correspondiente, para que no vuelva a ser comparado, teniendo en cuenta de que si es el ultimo numero de la lista no se suma.")),(0,r.kt)("h3",{id:"salida"},"Salida"),(0,r.kt)("p",null,"Una vez que tengo la lista generada, escribo en un nuevo archivo el resultado"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'# Escribir archivo con lista final\nf = open("output.txt", "a")\nf.write(str(final_list))\nf.close()\n')),(0,r.kt)("h3",{id:"adicionales"},"Adicionales"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Lograr una implementaci\xf3n del problema anterior utilizando threads y paralelismo.")),(0,r.kt)("p",null,"Nunca utilic\xe9 threads y paralelismo, voy a investigar un poco de que se trata."),(0,r.kt)("h2",{id:"preguntas-extra"},"Preguntas Extra"),(0,r.kt)("h3",{id:"1-qu\xe9-es-y-para-qu\xe9-sirve-una-clase-abstracta-qu\xe9-es-herencia-m\xfaltiple"},"1) \xbfQu\xe9 es y para qu\xe9 sirve una clase abstracta? \xbfQu\xe9 es herencia m\xfaltiple?"),(0,r.kt)("p",null,"Una ",(0,r.kt)("strong",{parentName:"p"},"clase abstracta")," es una clase que no se instancia por s\xed sola, sino que es instanciada mediante sus clases hijas.\nSirve para:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Obligar la implementaci\xf3n de m\xe9todos abstractos en las clases hijas"),(0,r.kt)("li",{parentName:"ol"},"Usar como estructura base para objetos que compartan propiedades. Ejemplo: clase abstracta Persona, donde es padre de Empleado y Cliente.\nAmbas comparten atributos como DNI, nombre pero por cuestiones de dise\xf1o se decide que nunca se instancia un objeto Persona directamente.\nSino que s\xf3lo se instancian Empleados y Clientes.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'class Persona:\n  # Constructor de la clase\n  def __init__(self,nombre,DNI):\n    self.nombre = nombre\n    self.DNI = DNI\n    \nclass Cliente(Persona):\n  deuda = 1000\n    \nclass Empleado(Persona):\n    puesto = "Administrativo"\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Herencia multiple")," consiste en que una clase pueda extender de multiples clases, esto en algunos lenguajes como Java no se permite pero en Python si.\nimplementacion en Python:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'\nclass RecHumanos(Empleado,Valencia):\n  def saludo(self):\n    print("Hola, mi nombre es " + self.nombre + " y mi ID es " + self.iden + ".")\n    print("Trabajo en Recursos Humanos.")\n    print("Vivo en " + self.domicilio + ".")\n')),(0,r.kt)("h3",{id:"2-qu\xe9-es-para-qu\xe9-sirve-y-c\xf3mo-se-implementan-los-m\xe9todos-privados-y-p\xfablicos-de-las-clases-en-python"},"2) \xbfQu\xe9 es, para qu\xe9 sirve y c\xf3mo se implementan los m\xe9todos privados y p\xfablicos de las clases en Python?"),(0,r.kt)("p",null," Los metodos publicos son funcionalidades que posee una clase los cuales pueden ser invocadas desde afuera del scope de la clase, por ejemplo en otra clase."),(0,r.kt)("p",null,"Un metodo privado es aquel que solo puede ser llamado en la clase en la que se define."),(0,r.kt)("p",null,"En ",(0,r.kt)("strong",{parentName:"p"},"python no existen distinciones entre private y public"),', entonces para indicar que algo private se utiliza un "_" adelante del metodo o atributo.\nPara que el desarrollador sepa que se debe utilizar dentro de la clase. No hay nada que impida utilizarlo como si fuera publico pero es una mala practica.'),(0,r.kt)("h3",{id:"3-cu\xe1l-es-la-diferencia-entre-un-tipo-de-dato-list-set-tuple-y-dict-en-qu\xe9-caso-utilizar\xeda-cada-una-de-ellas"},"3) \xbfCu\xe1l es la diferencia entre un tipo de dato list, set, tuple y dict? \xbfEn qu\xe9 caso utilizar\xeda cada una de ellas?"),(0,r.kt)("p",null,"todo"),(0,r.kt)("h3",{id:"4-que-es-un-decorator-en-python-de-un-ejemplo-de-c\xf3mo-utilizar\xeda-uno"},"4) \xbfQue es un decorator en Python? De un ejemplo de c\xf3mo utilizar\xeda uno?"),(0,r.kt)("p",null,"todo"))}d.isMDXComponent=!0}}]);